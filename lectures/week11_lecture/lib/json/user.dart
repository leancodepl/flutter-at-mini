import 'dart:convert';

import 'package:freezed_annotation/freezed_annotation.dart';

// A from and to json function will be generated by `build_runner`.
// Generated files land in `*.g.dart` where `g` is for "generated".
part 'user.g.dart';

// An annotation for the code generator to know that this class needs the
// JSON serialization logic to be generated.
// The annotation accepts many configuration options, for instance changing
// the casing of fields (here changed to PascalCase).
@JsonSerializable(fieldRename: FieldRename.pascal)
class User {
  const User(this.name, this.email, this.age, {required this.isAdmin});

  // A convention factory constructor for creating a new User instance
  // from a map. Pass the map to the generated `_$UserFromJson()` function.
  // The constructor is named after the source class, in this case, User.
  factory User.fromJson(Map<String, dynamic> json) => _$UserFromJson(json);

  final String name;
  final String email;
  final int age;
  final bool isAdmin;

  // A convention method `toJson` The implementation simply calls
  // the private, generated helper function `_$UserToJson`.
  Map<String, dynamic> toJson() => _$UserToJson(this);
}

void main() {
  const jsonStr = '''
    {
      "Name": "Marcin",
      "Email": "marcin.wojnarowski@leancode.pl",
      "Age": 23,
      "IsAdmin": false
    }''';

  final parsed = jsonDecode(jsonStr);
  print('parsed: $parsed');

  final user = User.fromJson(parsed as Map<String, dynamic>);

  print('toJson: ${user.toJson()}');
}
